library(ISLR2)
weekly <- Weekly
View(weekly)
# Get names of columns in weekly dataset
names(weekly)
# get dimensions of the Weekly dataset
dim(weekly)
# Produce summary statistics for each column
summary(weekly)
# Get correlation matrix for weekly data
corr(weekly[, -9])
# Get correlation matrix for weekly data
cor(weekly[, -9])
# Get correlation matrix for weekly data
weekly_cor <- cor(weekly[, -9])
View(weekly_cor)
attach(weekly)
plot(Volume)
?plot()
attack(weekly)
attach(weekly)
plot(Year, Volume)
glm.weekly <- glm(
Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
data = weekly, family = binomial
)
summary(glm.weekly)
weekly.probs <- predict(glm.weekly, type = "response")
weekly.pred <- rep("Down", 1250)
weekly.pred[weekly.probs > 0.5] = "Up"
table(weekly.pred, Direction)
weekly.pred <- rep("Down", 1089)
weekly.pred[weekly.probs > 0.5] = "Up"
table(weekly.pred, Direction)
mean(weekly.pred == Direction)
# Create a set of test data from the weekly dataset that includes observations
# from 2009 to 2010.
train <- (Year < 2009)
weekly.2008 <- weekly[!train, ]
dim(weekly.2008)
Direction.2008 <- Direction[!train]
glm.train <- glm(
Direction ~ Lag2, data = weekly, subset = train)
View(weekly.2008)
View(weekly.2008)
glm.train <- glm(
Direction ~ Lag2, data = weekly, subset = train)
glm.train <- glm(
Direction ~ Lag2, data = weekly, family = binomial, subset = train)
test.pred <- rep("Down", 104)
test.pred[test.probs > 0.5] <- "Up"
test.pred[test.prob > 0.5] <- "Up"
test.probs <- predict(glm.train, weekly.2008, type = "response")
test.pred[test.probs > 0.5] <- "Up"
table(test.pred, Direction.2008)
mean(test.pred == Direction.2008)
library(MASS)
lda.fit <- lda( Direction ~ Lag2, data = weekly, subset = train)
plot(lda.fit)
lda.pred <- predict(lda.fit, weekly.2008)
View(lda.fit)
lda.class <- lda.pred$class
View(lda.pred)
table(lda.class, Direction.2008)
mean(lda.class == Direction.2008)
qda.fit <- qda(Direction ~ Lag2, data = weekly, subset = train)
qda.fit
qda.class <- predict(qda.fit, weekly.2008)$class
table(qda.class, Direction.2008)
mean(qda.class == Direction.2008)
install.packages(e1071)
install.packages("e1071")
library(e1071)
nb.fit <- naiveBayes(Direction ~ Lag2, data = weekly, subset = train)
nb.fit
nb.class <- predict(nb.fit, weekly.2008)
table(nb.class, Direction.2008)
mean(nb.class == Direction.2008)
library(class)
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
train.X <- Lag2[train, ]
train.X <- weekly.2008[train, ]$Lag2
test.X <- weekly.2008[!train, ]$Lag2
train.Direction <- Direction[train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
# Create matrix of predictors for train and test data and vector of responses for
# training data
train.X <- weekly.2008[train, ]
View(train.X)
# Create matrix of predictors for train and test data and vector of responses for
# training data
train.X <- weekly[train, ]$Lag2
test.X <- weekly.2008$Lag2
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
length(train.X)
length(test.X)
train.X <- cbind(Lag1, Lag2)[train, ]
length(train.X)
test.X <- cbind(Lag1, Lag2)[!train, ]
legnth(test.X)
length(test.X)
dim(train.X)
dim(test.X)
train.X <- weekly[train, ]$Lag2
test.X <- weekly.2008$Lag2
dim(train.X)
dim(test.X)
# Create matrix of predictors for train and test data and vector of responses for
# training data
train.X <- as.vector(weekly[train, ]$Lag2)
dim(train.X)
dtype(train.X)
dtypes(train.X)
class(train.X)
# Create matrix of predictors for train and test data and vector of responses for
# training data
train.X <- as.matrix(weekly[train, ]$Lag2)
dim(train.X)
test.X <- as.matrix(weekly.2008$Lag2)
dim(test.X)
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
table(knn.pred, Direction.2008)
mean(knn.pred == Direction.2008)
results <- data.frame(algorithm = c("Logistic", "LDA", "QDA", "KNN", "Naive Bayes"),
accuracy = c(mean(test.pred == Direction.2008),
mean(lda.class == Direction.2008),
mean(qda.class == Direction.2008),
mean(knn.pred == Direction.2008),
mean(nb.class == Direction.2008)))
results
boston <- Boston
View(boston)
